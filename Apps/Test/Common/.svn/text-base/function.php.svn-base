<?php
/**
 * 邮件发送函数
 */
    function sendMail($to, $title, $content) {
		Vendor('PHPMailer.PHPMailerAutoload');     
        $mail = new PHPMailer(); //实例化
        $mail->IsSMTP(); // 启用SMTP
        $mail->Host=C('MAIL_HOST'); //smtp服务器的名称（这里以QQ邮箱为例）
        $mail->SMTPAuth = C('MAIL_SMTPAUTH'); //启用smtp认证
        $mail->Username = C('MAIL_USERNAME'); //你的邮箱名
        $mail->Password = C('MAIL_PASSWORD') ; //邮箱密码
        $mail->From = C('MAIL_FROM'); //发件人地址（也就是你的邮箱地址）
        $mail->FromName = C('MAIL_FROMNAME'); //发件人姓名
        $mail->AddAddress($to,"尊敬的客户");
        $mail->WordWrap = 50; //设置每行字符长度
        $mail->IsHTML(C('MAIL_ISHTML')); // 是否HTML格式邮件
        $mail->CharSet=C('MAIL_CHARSET'); //设置邮件编码
        $mail->Subject =$title; //邮件主题
        $mail->Body = $content; //邮件内容
        $mail->AltBody = "这是一个纯文本的身体在非营利的HTML电子邮件客户端"; //邮件正文不支持HTML的备用显示
        return($mail->Send());
    }
	
	
	/**
	 * 计算两个坐标之间的距离(米)
	 * @param float $fP1Lat 起点(纬度)
	 * @param float $fP1Lon 起点(经度)
	 * @param float $fP2Lat 终点(纬度)
	 * @param float $fP2Lon 终点(经度)
	 * @return int
	 */
	function distanceBetween($fP1Lat, $fP1Lon, $fP2Lat, $fP2Lon){
		$fEARTH_RADIUS = 6378137;
		//角度换算成弧度
		$fRadLon1 = deg2rad($fP1Lon);
		$fRadLon2 = deg2rad($fP2Lon);
		$fRadLat1 = deg2rad($fP1Lat);
		$fRadLat2 = deg2rad($fP2Lat);
		//计算经纬度的差值
		$fD1 = abs($fRadLat1 - $fRadLat2);
		$fD2 = abs($fRadLon1 - $fRadLon2);
		//距离计算
		$fP = pow(sin($fD1/2), 2) +
			  cos($fRadLat1) * cos($fRadLat2) * pow(sin($fD2/2), 2);
		return intval($fEARTH_RADIUS * 2 * asin(sqrt($fP)) + 0.5);
	}
	/**
	 * 百度坐标系转换成标准GPS坐系
	 * @param float $lnglat 坐标(如:106.426, 29.553404)
	 * @return string 转换后的标准GPS值:
	 */
	function BD09LLtoWGS84($lnglat){ // 经度,纬度
		$lnglat = explode(',', $lnglat);
		list($x,$y) = $lnglat;
		$Baidu_Server = "http://api.map.baidu.com/ag/coord/convert?from=0&to=4&x={$x}&y={$y}";
		$result = @file_get_contents($Baidu_Server);
		$json = json_decode($result);
		if($json->error == 0){
			$bx = base64_decode($json->x);
			$by = base64_decode($json->y);
			$GPS_x = 2 * $x - $bx;
			$GPS_y = 2 * $y - $by;
			return $GPS_x.','.$GPS_y;//经度,纬度
		}else
			return $lnglat;
	}
	/**
	 * 二维数组排序
	 * @param $arr待排序数组
	 * @param $keys排序字段 如age
	 * @param $type排序类型 asc升序（默认） desc降序
	 * @return $new_array 排序好的新数组
	 */
	function array_sort($arr,$keys,$type='asc'){ 
		$keysvalue = $new_array = array();
		foreach ($arr as $k=>$v){
			$keysvalue[$k] = $v[$keys];
		}
		if($type == 'asc'){
			asort($keysvalue);
		}else{
			arsort($keysvalue);
		}
		reset($keysvalue);
		foreach ($keysvalue as $k=>$v){
			$new_array[$k] = $arr[$k];
		}
		$new_array=array_values($new_array);
		return $new_array; 
	}

?>